/*
 * @Author: Hao Liu
 * @Date: 2019-08-16 17:42:04
 * @LastEditors: Hao Liu
 * @LastEditTime: 2019-08-16 17:42:21
 * @Description: Graph, Union Find
 */

class Solution {
    
    class DSU {
        int n;
        int[] size;
        int[] root;
        int[] numAffected;
        
        public DSU(int n) {
            this.n = n;
            size = new int[n];
            root = new int[n];
            numAffected = new int[n];
            for (int i = 0; i < n; i++) {
                root[i] = i;
                size[i] = 1;
            }
        }
        
        public int find(int x) {
            if (root[x] == x)   return x;
            root[x] = find(root[x]);
            return root[x];
        }
        
        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX == rootY) return;
            if (size[x] < size[y]) {
                root[rootX] = rootY;
                size[rootY] += size[rootX];
            }   else {
                root[rootY] = rootX;
                size[rootX] += size[rootY];
            }
        }
    }
    
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        DSU dsu = new DSU(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    dsu.union(i, j);
                }
            }
        }
        for (int i : initial) {
            int rootI = dsu.find(i);
            dsu.numAffected[rootI]++;
        }
        int num = 0;
        int res = -1;
        int min = Integer.MAX_VALUE;
        for (int i : initial) {
            min = Math.min(min, i);
            int rootI = dsu.find(i);
            if (dsu.numAffected[rootI] == 1) {
                if (num < dsu.size[rootI]) {
                    num = dsu.size[rootI];
                    res = i;
                }   else if (num == dsu.size[rootI]) {
                    res = Math.min(res, i);
                }
            }
        }
        return res == -1 ? min : res;
    }
}